package Code.Java;

public class VariateStudy {

    static String static1; // 静态变量只能在类中定义
    public static void main(String[] args) {
        // 变量
        // 变量名不能重复
        // 变量名不能以数字和特殊字符开头
        int a = 10;
        // double a = 2; // 不同类型的变量名也不能重复
        System.out.println(a);

        // 变量可以只说明不赋值, 但是不可以不调用
        @SuppressWarnings("unused") // 忽略未调用警告
        int b;
        // System.out.println(b); // 报错

        // 变量类型的内容类型需要相同
        // int c = 3.56; // 左右类型不同, 意思是不同类型的变量不能赋值

        // 声明 long 类型的变量
        @SuppressWarnings("unused") // 忽略未调用警告
        long l = 1000000000000000000L; // 默认是int类型, 所以需要加L/l

        // 声明 float 类型的变量
        @SuppressWarnings("unused") // 忽略未调用警告
        float f = 3.14F; // 默认是double类型, 所以需要加F/f

        // java基本数据类型
        // 字符 char 内容是单引号 有且只有一个字符
        // char c = 'Ab'; // 报错 
        @SuppressWarnings("unused") // 忽略未调用警告
        char d1 = '1';
        char char1 = 'A';

        // 表达式转换 小类型转大类型
        int e = 10 + char1; // char1 转换为 int 类型
        System.out.println(e); // 75

        int e2 = 10 + 'b';
        System.out.println(e2); // 108

        // 自动类型转换 小类型转大范围类型
        byte b1 = 10; // byte: -128 ~ 127
        int i1 = b1; // byte -> int

        // 强制类型转换
        // 数据类型 变量名 = (数据类型) 要转换的数据
        // short 类型 -32768 ~ 32767
        // int 类型 -2147483648 ~ 2147483647
        @SuppressWarnings("unused") // 忽略未调用警告
        short s1 = (short) i1; // int -> short

        // 成员变量 对象名.成员变量 (对象属性)
        // 成员变量是定义在类中, 方法外的变量
        // 成员变量不赋值, 有默认值
        // int 默认值 0
        // double 默认值 0.0
        // char 默认值 \u0000
        // boolean 默认值 false
        // String 默认值 null
        // 引用数据类型 默认值 null
        @SuppressWarnings("unused") // 忽略未调用警告
        String variate1;

        // 局部变量
        // 局部变量是定义在方法中的变量
        // 局部变量必须赋值, 不然会报错
        // 局部变量没有默认值
        

        // 静态变量(类变量) static
        // 静态变量是定义在类中, 方法外的变量
        // 静态变量是所有对象共享的
        // 可以通过类名调用, 也可以通过对象名调用
        // 在同一个类里面, 静态变量可以直接访问, 不用写类名
        

        // 静态变量和成员变量的区别
        // 1. 存储位置不同 静态变量存储在方法区, 成员变量存储在堆内存
        // 2. 生命周期不同 静态变量随着类的加载而加载, 随着类的消失而消失, 成员变量随着对象的创建而存在, 随着对象的消失而消失
        // 3. 调用方式不同 静态变量可以通过类名调用, 也可以通过对象名调用, 成员变量只能通过对象名调用
        // 4. 初始化值不同 静态变量有默认值, 成员变量没有默认值

        // 实例变量
        // 实例变量是定义在类中, 方法外的变量
        // 实例变量属于对象, 只有对象才能调用
        // 实例变量必须创建对象后才能使用
        // 实例变量没有默认值

        // 实例变量和局部变量的区别
        // 1. 存储位置不同 实例变量存储在堆内存, 局部变量存储在栈内存
        // 2. 生命周期不同 实例变量随着对象的创建而存在, 随着对象的消失而消失, 局部变量随着方法的调用而存在, 随着方法的调用完毕而消失
        // 3. 初始化值不同 实例变量没有默认值, 局部变量没有默认值

        // 实例变量和成员变量的区别
        // 1. 生命周期不同 实例变量随着对象的创建而存在, 随着对象的消失而消失, 成员变量随着类的加载而加载, 随着类的消失而消失
        // 2. 初始化值不同 实例变量没有默认值, 成员变量有默认值

        // java对象和类的区别(白话)
        // 类是一个模板, 对象是一个实例
        // 类是一个抽象的概念, 对象是一个具体的实体
        // 类是一个设计图, 对象是一个实物

        // java类和对象的关系
        // 类是对象的模板, 对象是类的实例

        // 各个变量的使用场景
        // 成员变量: 用于描述对象的属性, 比如人的年龄, 性别等, 一般在类中定义
        // 静态变量: 用于描述类的属性, 比如学生的学校, 班级等, 一般在类中定义
        // 实例变量: 用于描述对象的属性, 比如人的年龄, 性别等, 一般在类中定义
        // 局部变量: 用于描述方法的属性, 比如方法中的参数, 方法中的变量等, 一般在方法中定义


    }
}
